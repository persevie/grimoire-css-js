name: grimoire_css_js_ci
env:
  DEBUG: napi:*
  APP_NAME: grimoire-css-js
  MACOSX_DEPLOYMENT_TARGET: "10.13"
  CARGO_INCREMENTAL: "1"
permissions:
  contents: write
  id-token: write
"on":
  push:
    branches:
      - main
    tags-ignore:
      - "**"
    paths:
      - "grimoire-css-js/**"
      - "!grimoire-css-js/**/*.md"
      - "!grimoire-css-js/LICENSE"
      - "!grimoire-css-js/**/*.gitignore"
      - "!grimoire-css-js/.editorconfig"
      - "!grimoire-css-js/docs/**"
  workflow_dispatch: null
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  determine_release:
    name: Determine if release is needed
    runs-on: ubuntu-latest
    outputs:
      SHOULD_RELEASE: ${{ steps.release_check.outputs.SHOULD_RELEASE }}
      NEW_TAG: ${{ steps.release_check.outputs.NEW_TAG }}
      PACKAGE_VERSION: ${{ steps.release_check.outputs.PACKAGE_VERSION }}
      IS_PRERELEASE: ${{ steps.release_check.outputs.IS_PRERELEASE }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine if release is needed
        id: release_check
        working-directory: grimoire-css-js
        shell: bash
        run: |
          git fetch --tags
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          if git rev-parse "v$CURRENT_VERSION" >/dev/null 2>&1; then
            echo "Tag v$CURRENT_VERSION already exists. No release needed."
            echo "SHOULD_RELEASE=false" >> $GITHUB_OUTPUT
          else
            echo "No existing tag for version $CURRENT_VERSION. Release is needed."
            echo "SHOULD_RELEASE=true" >> $GITHUB_OUTPUT
            echo "NEW_TAG=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "PACKAGE_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            
            # Determine if it's a prerelease (contains alpha, beta, rc, etc.)
            if echo "$CURRENT_VERSION" | grep -E "(alpha|beta|rc|dev|pre)" > /dev/null; then
              echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
            else
              echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
            fi
          fi

  lint:
    needs: determine_release
    if: needs.determine_release.outputs.SHOULD_RELEASE == 'true'
    defaults:
      run:
        working-directory: grimoire-css-js
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn
          cache-dependency-path: grimoire-css-js/yarn.lock
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Install dependencies
        run: yarn install
      - name: Oxlint
        run: yarn lint
      - name: Cargo fmt
        run: cargo fmt -- --check
      - name: Clippy
        run: cargo clippy
  build:
    needs:
      - determine_release
      - lint
    if: needs.determine_release.outputs.SHOULD_RELEASE == 'true'
    defaults:
      run:
        working-directory: grimoire-css-js
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: yarn build --target x86_64-apple-darwin
          - host: windows-latest
            build: yarn build --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: yarn build --target x86_64-unknown-linux-gnu --use-napi-cross
          - host: macos-latest
            target: aarch64-apple-darwin
            build: yarn build --target aarch64-apple-darwin
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: yarn build --target aarch64-unknown-linux-gnu --use-napi-cross
    name: stable - ${{ matrix.settings.target }} - node@22
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn
          cache-dependency-path: grimoire-css-js/yarn.lock
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.napi-rs
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        with:
          version: 0.14.1
      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            grimoire-css-js/${{ env.APP_NAME }}.*.node
            grimoire-css-js/${{ env.APP_NAME }}.*.wasm
          if-no-files-found: error
  test-macOS-windows-binding:
    defaults:
      run:
        working-directory: grimoire-css-js
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            architecture: x64
          - host: macos-latest
            target: aarch64-apple-darwin
            architecture: arm64
          - host: macos-latest
            target: x86_64-apple-darwin
            architecture: x64
        node:
          - "20"
          - "22"
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          architecture: ${{ matrix.settings.architecture }}
          cache-dependency-path: grimoire-css-js/yarn.lock
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: grimoire-css-js
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: yarn test
  test-linux-binding:
    defaults:
      run:
        working-directory: grimoire-css-js
    name: Test ${{ matrix.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
        node:
          - "20"
          - "22"
    runs-on: ${{ contains(matrix.target, 'aarch64') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          cache-dependency-path: grimoire-css-js/yarn.lock
      - name: Output docker params
        id: docker
        run: |
          node -e "
            if ('${{ matrix.target }}'.startsWith('aarch64')) {
              console.log('PLATFORM=linux/arm64')
            } else if ('${{ matrix.target }}'.startsWith('armv7')) {
              console.log('PLATFORM=linux/arm/v7')
            } else {
              console.log('PLATFORM=linux/amd64')
            }
          " >> $GITHUB_OUTPUT
          node -e "
            if ('${{ matrix.target }}'.endsWith('-musl')) {
              console.log('IMAGE=node:${{ matrix.node }}-alpine')
            } else {
              console.log('IMAGE=node:${{ matrix.node }}-slim')
            }
          " >> $GITHUB_OUTPUT
      - name: Install dependencies
        run: |
          yarn config set --json supportedArchitectures.cpu '["current", "arm64", "x64", "arm"]'
          yarn config set --json supportedArchitectures.libc '["current", "musl", "gnu"]'
          yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.target }}
          path: grimoire-css-js
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ contains(matrix.target, 'armv7') }}
        with:
          platforms: all
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: ${{ contains(matrix.target, 'armv7') }}
      - name: Test bindings
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.docker.outputs.IMAGE }}
          options: "-v ${{ github.workspace }}:${{ github.workspace }} -w ${{ github.workspace }}/grimoire-css-js --platform ${{ steps.docker.outputs.PLATFORM }}"
          run: yarn test
  publish:
    defaults:
      run:
        working-directory: grimoire-css-js
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - determine_release
      - test-macOS-windows-binding
      - test-linux-binding
    if: needs.determine_release.outputs.SHOULD_RELEASE == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn
          cache-dependency-path: grimoire-css-js/yarn.lock
      - name: Install dependencies
        run: yarn install
      - name: create npm dirs
        run: yarn napi create-npm-dirs
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: grimoire-css-js/artifacts
      - name: Log
        run: tree . -I node_modules -I target
      - name: Move artifacts
        run: yarn artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc

          VERSION="${{ needs.determine_release.outputs.PACKAGE_VERSION }}"
          IS_PRERELEASE="${{ needs.determine_release.outputs.IS_PRERELEASE }}"

          echo "Publishing version: $VERSION"
          echo "Is prerelease: $IS_PRERELEASE"

          if [ "$IS_PRERELEASE" = "true" ]; then
            echo "Publishing prerelease version as 'next' tag"
            npm publish --tag next --access public
          else
            echo "Publishing stable version as 'latest' tag"
            npm publish --access public
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - determine_release
      - publish
    if: needs.determine_release.outputs.SHOULD_RELEASE == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.determine_release.outputs.NEW_TAG }}
          files: ./artifacts/**/*
          body: "Release of grimoire-css-js version ${{ needs.determine_release.outputs.NEW_TAG }}"
          draft: false
          prerelease: ${{ needs.determine_release.outputs.IS_PRERELEASE == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
